load("shapes.lib", "shapes")
load("draw.lib", "draw")
load("mod.lib", "pads")
load("math.lib", "x_array_within")
load("pcb.lib", p="pcb")

mount_dia = XY(3.1, 3.1)
mount_size = XY(mount_dia.x + 2, mount_dia.y + 2)

num_cols = 5

size = XY(num_cols * mount_size.x * 2, 17)
start_holes_x = -size.x/2 + mount_size.x

outline = draw.pcb.outline(shapes.box(size.x, size.y, rounded_radius=3), layer=layers.edge)

def make_hole(x, y):
	return Mod(
		name = "mount_hole",
		layer = layers.front.copper,
		pads = [
			pads.th("1", drill=mount_dia, size=mount_size),
		],
		placement = ModPlacement(XYZ(x, y, 0)),
	)

print(x_array_within(num_cols,  size.x, XY(0, -size.y / 4)))

pcb = PCB(
	drawings = outline,
	#segments = [p.via(XY(2,2)), p.track(end = XY(2,2))],
	modules = [make_hole(p.x, p.y) for p in x_array_within(num_cols,  size.x, XY(0, -size.y / 4))] +
		  [make_hole(p.x, p.y) for p in x_array_within(num_cols,  size.x, XY(0, +size.y / 4))],
)
